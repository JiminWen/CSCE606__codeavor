%html
  %head
    %title Taulbee Survey Data
    :css
      .heading{
      	color:white;
      	background-color:#500000;
      	height:50px;
      	margin:0;
      	padding:0;
      	font-size:40px;
      }
      
      .centered{
      	text-align:center;
      }
	
  %body
    
    %h1.centered.heading Taulbee Survey
    %p
      %a{:id => "Home", :href => site_index_path}
        %img{:height => "30", :src => "/images/homepageicon.jpg", :width => "30"}/
      %a{:id => "Back", :href => site_index_path}
        %img{:height => "30", :src => "/images/previous-icon.png", :width => "30"}/
        
    %form#generate{ :action => "/site/studentOutput", :method => "post"}
      %br
      %label Get a standard output
      %input{:name => "commit",:type => "submit", :value => "generate"}
      %input{:id => "tags_list", :name => "cur_year", :type => "hidden",:value => @year}
      %input{:name => "authenticity_token", :type => "hidden", :value => form_authenticity_token.to_s}
    -#form that allows the user to select which saved Query they want to load
    
    %form{:action => site_studentFilterSelection_path}
      //%label Get a standard output
      //%button
      %br
      %label Choose among saved queries
      %select#queryList{:name => "queryLoad" }
        - @queries.each do |query|
          %option{:value => query.name}= query.name
        end
      %input{:type => "submit", :value => "Load"}/
      
    -#filter objects that get duplicated when creating a filter
    -#this object should be hidden, and is made visible after cloning and adding
    %select#filtersListInner{:onchange => "DoFunc(this);", :onfocus => "this.selectedIndex = -1;", :name => "filter", :hidden => "true"}
      - if (@students != nil)
        - @students.column_names.each do |column_name|
          %option{:value => column_name}= column_name
    %select#comparatorListInner{:onchange => "getSelected(value)", :name => "comparator", :hidden => "true"}
      %option{:value => "="}= "="
      -#%option{:value => ">"}= ">"
      -#%option{:value => "<"}= "<"
      -#%option{:value => ">="}= ">="
      -#%option{:value => "<="}= "<="
    %select#filterValueInner{:name => "filterValue", :hidden => "true"}

    -#attribute object that get duplicated when creating a filter
    -#this object should be hidden, and is made visible after cloning and adding
    %select#attributeListInner{:name => "attribute", :hidden => "true"}
      - if (@students != nil)
        - @students.column_names.each do |column_name|
          %option{:value => column_name}= column_name
      end
      %option{:value => "count"} count
        
    -#used for test printing to screen 
    -#%p{:id => "testing"} 
    
    -#the form that actually contains the filters and attributes
    -#if a query is being loaded or repeated, it will automatically add them to the form
    %form#daForm{"accept-charset" => "UTF-8", :action => "/site/studentOutput", :method => "post"}
      %input{:name => "utf8", :type => "hidden", :value => "âœ“"}/
      %input{:id => "tags_list", :name => "cur_year", :type => "hidden",:value => @year}
      %input{:name => "authenticity_token", :type => "hidden", :value => form_authenticity_token.to_s}/
      %fieldset
        %label{:for => "Filters"} Choose your pre-filter
        %button#confirmNoOfFilters{:type => "button"} Add Filter
        %button#removeFilterButton{:type => "button"} Remove Last Filter
        #filterDiv{:name => "filterDiv"}
          - if @query != nil
            - filterIndex = 0
            - @query.prefilters.each do |filter|
              %select{:onchange => "DoFunc(this)", :onfocus => "this.selectedIndex = -1;", :name => "filter" + filterIndex.to_s, :id => "filter_" + filterIndex.to_s}
                - if (@students != nil)
                  - @students.column_names.each do |column_name|
                    %option{:value => column_name, :selected => column_name == filter.field}= column_name
              %select#loadedComparatorList{:onchange => "getSelected(value)", :name => "comparator" + filterIndex.to_s}
                %option{:value => "=", :selected => "=" == filter.comparator} =
                -#%option{:value => ">", :selected => ">" == filter.comparator} >
                -#%option{:value => "<", :selected => "<" == filter.comparator} <
                -#%option{:value => ">=", :selected => ">=" == filter.comparator} >=
                -#%option{:value => "<=", :selected => "<=" == filter.comparator} <=
              %select{:id => "filterValue_" + filterIndex.to_s, :name => "filterValue" + filterIndex.to_s}
              %br
              - filterIndex = filterIndex + 1
        
        %label{:for => "rowfilter"} Choose your rowfilter
        %button#addARowFilter{:type => "button"}Add filter
        %button#removeARowFilter{:type => "button"}Remove filter
        #rowfilterDiv{:name => "rowfilterDiv"}
          
        
          
        %label{:for => "collumfilter"} Choose your collumfilter
        %button#addACollumFilter{:type => "button"}Add filter
        %button#removeACollumFilter{:type => "button"}Remove filter
        #collumfilterDiv{:name => "collumfilterDiv"}
        
              
        %label{:for => "Attributes"} Which attributes do you want to see?
        %button#confirmNoOfInfo{:type => "button"} Add Attribute
        %button#removeAttributeButton{:type => "button"} Remove Last Attribute
        #attributeDiv{:name => "attributeDiv"}
        
        
        %br
        %input{:name => "commit", :type => "submit", :value => "Apply"}/
        
        %hr
        %label{:for => "save label"} Query Name to Save:
        %input{:name => "saveName", :type => "text"}/
        %br/
        %input{:name => "commit", :type => "submit", :value => "Save"}/
      
    :javascript
      //variables to be set on the page loading
      var filterChosen = "";
      var comparatorChosen= "";
      var filterValueChosen="";
      var dropdown1="";
      var numberOfFiltersWhenLoaded = parseInt(#{@filterCount},10);
      var nextFilter = numberOfFiltersWhenLoaded;
      var numberOfAttributesWhenLoaded = parseInt(#{@headerCount},10);
      var nextAttribute = numberOfAttributesWhenLoaded;
      
      var num_rowfilter=0;
      var num_collumfilter=0;
      
      //when the page loads, if it is loading a saved filter or repeating a query
      //then it will populate the filter values for those filters on load
      window.onload = function()
      { console.log('query');
        var query = #{@prefilterValues}
        
        for(var i = 0; i < query.length; i++)
        {
          var dropDown = $("#filter_" + i.toString())[0]
          DoFunc2(dropDown)
        }
        
      };
      
      document.getElementById("addARowFilter").onclick=function(student){
        console.log("add row filter");
        Addrowfilter(num_rowfilter);
        num_rowfilter=num_rowfilter+1;
      }
      function Addrowfilter(number){
        var list=document.getElementById("filtersListInner").cloneNode(true);
        console.log("row filterlist")
        console.log(list);
        list.removeAttribute("hidden");
        list.name = "rowfilter" + number.toString();
        list.id = "rowfilter_" + number.toString();
        rowfilterDiv.appendChild(list);
        rowfilterDiv.appendChild (document.createTextNode (" "));
        var comparator = document.getElementById("comparatorListInner").cloneNode(true);
        comparator.removeAttribute("hidden");
        comparator.name = "rowcomparator" + number.toString();
        comparator.id = "rowcomparator_" + number.toString();
        rowfilterDiv.appendChild(comparator);
        rowfilterDiv.appendChild (document.createTextNode (" "));
        console.log("rowfilter value");
        console.log(filterValue);
        var filterValue = document.getElementById("filterValueInner").cloneNode(true);
        
        filterValue.removeAttribute("hidden");
        filterValue.name = "rowfilterValue" + number.toString();
        filterValue.id = "rowfilterValue_" + number.toString(); 
        console.log("check inner filter value");
        console.log(filterValue);
        rowfilterDiv.appendChild(filterValue);
        rowfilterDiv.appendChild (document.createTextNode (" "));
        rowfilterDiv.appendChild(document.createElement("br"));
        rowfilterDiv.appendChild (document.createTextNode (" "));
        DoFunc(list);
      }
      document.getElementById("removeARowFilter").onclick=function(student){
        	for(var i = 0; i< 8; i++)//8 because there are 8 elements per filter added
      	{
          rowfilterDiv.removeChild(rowfilterDiv.lastChild);
        }
      	num_rowfilter= num_rowfilter - 1;
      }
      
      document.getElementById("addACollumFilter").onclick=function(student){
        console.log("add collum filter");
        Addcollumfilter(num_collumfilter);
        num_collumfilter=num_collumfilter+1;
      }
      function Addcollumfilter(number){
        var list=document.getElementById("filtersListInner").cloneNode(true);
        console.log("collum filterlist")
        console.log(list);
        list.removeAttribute("hidden");
        list.name = "collumfilter" + number.toString();
        list.id = "collumfilter_" + number.toString();
        collumfilterDiv.appendChild(list);
        collumfilterDiv.appendChild (document.createTextNode (" "));
        var comparator = document.getElementById("comparatorListInner").cloneNode(true);
        comparator.removeAttribute("hidden");
        comparator.name = "collumcomparator" + number.toString();
        comparator.id = "collumcomparator_" + number.toString();
        collumfilterDiv.appendChild(comparator);
        collumfilterDiv.appendChild (document.createTextNode (" "));
        console.log("collumfilter value");
        console.log(filterValue);
        var filterValue = document.getElementById("filterValueInner").cloneNode(true);
        
        filterValue.removeAttribute("hidden");
        filterValue.name = "collumfilterValue" + number.toString();
        filterValue.id = "collumfilterValue_" + number.toString(); 
        console.log("check inner filter value");
        console.log(filterValue);
        collumfilterDiv.appendChild(filterValue);
        collumfilterDiv.appendChild (document.createTextNode (" "));
        collumfilterDiv.appendChild(document.createElement("br"));
        collumfilterDiv.appendChild (document.createTextNode (" "));
        DoFunc(list);
      }
      document.getElementById("removeACollumFilter").onclick=function(student){
        	for(var i = 0; i< 8; i++)//8 because there are 8 elements per filter added
      	{
          collumfilterDiv.removeChild(collumfilterDiv.lastChild);
        }
      	num_collumfilter= num_collumfilter - 1;
      }
      
      //when clicked adds a filter
      document.getElementById("confirmNoOfFilters").onclick=function(student)
      {   console.log("nextfilter="+nextFilter)
      	  AddFilter(nextFilter);
      	  nextFilter = nextFilter + 1;
      }
      
      //is called when adding a filter, copies all the necessary elements
      function AddFilter(number)
      { 
        var list = document.getElementById("filtersListInner").cloneNode(true);
        console.log(list);
        list.removeAttribute("hidden");
        list.name = "filter" + number.toString();
        list.id = "filter_" + number.toString();
        console.log("filterDiv before change");
        console.log(filterDiv);
        filterDiv.appendChild(list);
        filterDiv.appendChild (document.createTextNode (" "));
        
        var comparator = document.getElementById("comparatorListInner").cloneNode(true);
        comparator.removeAttribute("hidden");
        comparator.name = "comparator" + number.toString();
        comparator.id = "comparator_" + number.toString();
        
        console.log("comparator");
        console.log(comparator);
        
        filterDiv.appendChild(comparator);
        filterDiv.appendChild (document.createTextNode (" "));
        
        var filterValue = document.getElementById("filterValueInner").cloneNode(true);
        filterValue.removeAttribute("hidden");
        filterValue.name = "filterValue" + number.toString();
        filterValue.id = "filterValue_" + number.toString();
        filterDiv.appendChild(filterValue);
        filterDiv.appendChild (document.createTextNode (" "));
        filterDiv.appendChild(document.createElement("br"));
        filterDiv.appendChild (document.createTextNode (" "));
        DoFunc(list)
      }
      
      //when clicked adds an attribute
      document.getElementById("confirmNoOfInfo").onclick=function(student)
      {
        AddAttribute(nextAttribute);
      	nextAttribute = nextAttribute + 1;
      	
      }
      
      //is called when adding an attribute, copies all the necessary elements
      function AddAttribute(number)
      {
          var list = document.getElementById("attributeListInner").cloneNode(true);
          list.removeAttribute("hidden");
          list.name = "attribute" + number.toString()
          list.id = "attribute_" + number.toString()
          attributeDiv.appendChild(list);
          attributeDiv.appendChild (document.createTextNode (" "));
          attributeDiv.appendChild(document.createElement("br"));
          attributeDiv.appendChild (document.createTextNode (" "));
      }
      
      //performs the ajax function to set the value of the filter value drop down dynamically
      function DoFunc(s)
      { console.log("dofunc list.id");
        console.log(s.id);
        
        $.ajax({
          url: "/site/receiveAjax",
          data: {
              id: s.id,
              c_name: $("#".concat(s.id," option:selected")).text()
          },
          dataType: "json",
          success: function(data){
            var number = s.id.match(/\d+/)[0]; 
            var dropDown;
            if (s.id.match(/^filter/))
            dropDown = document.getElementById("filterValue_".concat(number.toString()));
            else if (s.id.match(/^rowfilter/))
            dropDown = document.getElementById("rowfilterValue_".concat(number.toString()));
            else if (s.id.match(/^collumfilter/))
            dropDown=document.getElementById("collumfilterValue_".concat(number.toString()));
            dropDown.options.length = 0;
            var vec = JSON.parse(data["value"]);
            
            console.log("data value");
            console.log(vec);
            //creates an option for the select element for each value returned for a column
            for(var i = 0; i < vec.length; i++)
            {
              var option = document.createElement("option");
              option.text = vec[i];
              dropDown.add(option);
            }
          },
          failure: function(response){
          }
        });
      }
      
      //performs the ajax function to set the value of the filter value drop down dynamically
      //only used for filters that are loaded or repeat filters
      function DoFunc2(s)
      { 
        console.log('data.c_name'+data.c_name);
        $.ajax({
           url: "/site/receiveAjax",
           data: {
               id: s.id,
               yolo: "YOLO",
               c_name: $("#".concat(s.id," option:selected")).text()
           },
           dataType: "json",
           success: function(data){
           
            var number = s.id.match(/\d+/)[0]; 
            var x = document.getElementById("filterValue_".concat(number.toString()));
            
            
            x.options.length = 0;
            var vec = JSON.parse(data["value"])

            //creates an option for the select element for each value returned for a column
            for(var i = 0; i < vec.length; i++)
            {
              var option = document.createElement("option");
              option.text = vec[i];
              x.add(option);
              
              //detects which option was selected, and sets that to the current selected value
              if(option.text == #{@filterValues}[number])
              {
                option.selected = true
              }
            }
           },
           failure: function(response){
           }
        });
      }
      
      //function used to remove the last filter when the button is clicked
      document.getElementById("removeFilterButton").onclick=function(student)
      {
      	for(var i = 0; i< 8; i++)//8 because there are 8 elements per filter added
      	{
          filterDiv.removeChild(filterDiv.lastChild);
        }
      	nextFilter = nextFilter - 1;
      }
      
      //function used to remove the last attribute when the button is clicked
      document.getElementById("removeAttributeButton").onclick=function(student)
      {
      	for(var i = 0; i< 4; i++)//4 because there are 4 elements per attribute added
      	{
          attributeDiv.removeChild(attributeDiv.lastChild);
        }
      	nextAttribute = nextAttribute - 1;
      }


